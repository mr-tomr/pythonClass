In Python, curly braces {}, square brackets [], and parentheses () are used for different purposes and follow specific rules:

Curly Braces {}:

  Used to define dictionary literals, sets, and dictionary comprehensions.
  For dictionaries: {key1: value1, key2: value2, ...}
  For sets: {element1, element2, ...}
  For dictionary comprehensions: {key: value for (key, value) in iterable}
  No duplicates are allowed in sets or dictionary keys.
  Used for code blocks in control flow statements like if-else, loops, and function definitions.
  Used for string formatting with f-strings: f"{variable}"
  Used for creating empty dictionaries and sets: empty_dict = {}, empty_set = set()

Square Brackets []:

  Used to define list literals and list comprehensions.
  For lists: [element1, element2, ...]
  For list comprehensions: [expression for item in iterable if condition]
  Used for indexing and slicing sequences (e.g., lists, strings, tuples): my_list[0], my_string[2:5]
  Used for list manipulation operations like appending, removing, and modifying elements: my_list.append(), del my_list[0]
  Used for performing list operations like concatenation and repetition: list1 + list2, [1] * 3

Parentheses ():

  Used for defining tuples and tuple literals.
  For tuples: (element1, element2, ...)
  Used for enclosing function arguments and method calls: function(argument1, argument2)
  Used for grouping expressions and operations to control operator precedence: (a + b) * c
  Used for tuple unpacking and assignment: a, b = (1, 2)
